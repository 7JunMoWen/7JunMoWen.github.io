<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从认识Nginx，到Nginx的使用</title>
      <link href="/posts/d7386c6d/"/>
      <url>/posts/d7386c6d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、Nginx是什么？"><a href="#一、Nginx是什么？" class="headerlink" title="一、Nginx是什么？"></a>一、Nginx是什么？</h1><ul><li>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。</li><li>其特点是<strong>占有内存少，并发能力强</strong>，事实上nginx的并发能力在同类型的网页服务器中表现较好，处理高并发能力是十分强大的，能经受高负载的考验，有报告表明能支持高达 50,000 个并发连接数。除此，Nginx还支持热部署，启动简单，可以做到7*24不间断运行。几个月都不需要重新启动。</li></ul><h1 id="二、Nginx的反向代理（扩展：正向代理）"><a href="#二、Nginx的反向代理（扩展：正向代理）" class="headerlink" title="二、Nginx的反向代理（扩展：正向代理）"></a><strong>二、Nginx的反向代理（扩展：正向代理）</strong></h1><p><strong>首先，看一张关于正向代理和反向代理的图片</strong></p><p><img src="https://zscbdic.cn/upload/7f4b54a38d949d2a022a8da34fe260b8-ivoy.png" alt="img"></p><p>在这里，我用通俗易懂的方式解释一下：</p><p><strong>正向代理：</strong> 我们平时需要访问国外的浏览器是不是很慢，比如我们要看推特，看GitHub等等。我们直接用国内的服务器无法访问国外的服务器，或者是访问很慢。所以我们需要在本地搭建一个服务器来帮助我们去访问。那这种就是正向代理。（<strong>浏览器中配置代理服务器</strong>）</p><p><strong>反向代理：</strong> 那什么是反向代理呢。比如：我们访问淘宝的时候，淘宝内部肯定不是只有一台服务器，它的内部有很多台服务器，那我们进行访问的时候，因为服务器中间session不共享，那我们是不是在服务器之间访问需要频繁登录，那这个时候淘宝搭建一个过渡服务器，对我们是没有任何影响的，我们是登录一次，但是访问所有，这种情况就是 <strong>反向代理</strong>。对我们来说，客户端对代理是无感知的，客户端不需要任何配置就可以访问，我们只需要把请求发送给反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，<strong>此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器的地址</strong>。（<strong>在服务器中配置代理服务器</strong>）</p><h1 id="三、Nginx的负载均衡"><a href="#三、Nginx的负载均衡" class="headerlink" title="三、Nginx的负载均衡"></a>三、Nginx的负载均衡</h1><ol><li><p>什么是负载均衡？</p><ol><li><p>负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。<br>负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p></li><li><p>简单来说就是：现有的请求使服务器压力太大无法承受，所有我们需要搭建一个服务器集群，去分担原先一个服务器所承受的压力，那现在我们有ABCD等等多台服务器，我们需要把请求分给这些服务器，但是服务器可能大小也有自己的不同，所以怎么分？如何分配更好？又是一个问题。</p></li></ol></li><li><p>Nginx给出来三种关于负载均衡的方式：</p><ol><li>轮询法（默认方法）：<br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。<br>适合服务器配置相当，无状态且短平快的服务使用。也适用于图片服务器集群和纯静态页面服务器集群。</li><li>weight权重模式（加权轮询）：<br>指定轮询比率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br>这种方式比较灵活，当后端服务器性能存在差异的时候，通过配置权重，可以让服务器的性能得到充分发挥，有效利用资源。weight和访问比率成正比，用于后端服务器性能不均的情况。权重越高，在被访问的概率越大</li><li>ip_hash：<br>上述方式存在一个问题就是说，在负载均衡系统中，假如用户在某台服务器上登录了，那么该用户第二次请求的时候，因为我们是负载均衡系统，每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的。<br>我们可以采用ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</li></ol></li></ol><h1 id="四、Nginx的动静分离"><a href="#四、Nginx的动静分离" class="headerlink" title="四、Nginx的动静分离"></a><strong>四、Nginx的动静分离</strong></h1><p>Nginx的静态处理能力很强，但是动态处理能力不足，因此，在企业中常用动静分离技术。动静分离技术其实是采用代理的方式，在**server{}**段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式<br>目前，通过使用Nginx大大提高了网站的响应速度，优化了用户体验，让网站的健壮性更上一层楼！</p><h4 id="传统解析方式"><a href="#传统解析方式" class="headerlink" title="传统解析方式"></a><strong>传统解析方式</strong></h4><p><img src="https://zscbdic.cn/upload/63718ac856367751ff3a0c112a6ba6fc.png" alt="img"></p><h4 id="动静分离解析"><a href="#动静分离解析" class="headerlink" title="动静分离解析"></a><strong>动静分离解析</strong></h4><img src="/posts/d7386c6d/"  alt="img" style="zoom: 200%;" /><h1 id="五、Nginx的配置文件介绍"><a href="#五、Nginx的配置文件介绍" class="headerlink" title="五、Nginx的配置文件介绍"></a>五、Nginx的配置文件介绍</h1><ol><li><p><strong>nginx的核心配置文件介绍（nginx.conf）</strong></p><ol><li><p><strong>配置文件示例：</strong></p><blockquote><h3 id="全局配置（Main模块）"><a href="#全局配置（Main模块）" class="headerlink" title="全局配置（Main模块）"></a>全局配置（Main模块）</h3><p>user nginx;  # 指定运行worker进程的用户和组<br>worker_processes auto;  # worker进程的个数，auto表示自动检测CPU核心数<br>error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;  # 错误日志存放路径及日志级别<br>pid &#x2F;var&#x2F;run&#x2F;nginx.pid;  # nginx的pid文件存放路径<br>worker_rlimit_nofile 65535;  # 一个worker进程所能够打开的最大文件句柄数</p><h3 id="事件处理（Events模块）"><a href="#事件处理（Events模块）" class="headerlink" title="事件处理（Events模块）"></a>事件处理（Events模块）</h3><p>events {<br>    worker_connections 1024;  # 每个worker进程支持的最大连接数<br>    use epoll;  # 使用epoll事件驱动模型，Linux推荐<br>    multi_accept on;  # 是否允许一次性地响应多个用户请求<br>}</p><h3 id="HTTP服务配置（Http模块）"><a href="#HTTP服务配置（Http模块）" class="headerlink" title="HTTP服务配置（Http模块）"></a>HTTP服务配置（Http模块）</h3><p>http {<br>    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;  # 引入MIME类型文件<br>    default_type  application&#x2F;octet-stream;  # 默认MIME类型</p><p>​    log_format  main  ‘$remote_addr - $remote_user [$time_local] “$request” ‘<br>​                      ‘$status $body_bytes_sent “$http_referer” ‘<br>​                      ‘“$http_user_agent” “$http_x_forwarded_for”‘;  # 定义日志格式</p><p>​    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;  # 访问日志存放路径及格式</p><p>​    sendfile        on;  # 是否使用sendfile传输文件<br>​    tcp_nopush     on;  # 启用TCP_NOPUSH或TCP_CORK选项</p><p>​    keepalive_timeout  65;  # 长连接超时时间</p><pre><code># 虚拟主机配置</code></pre><p>​    server {<br>​        listen       80;  # 监听端口<br>​        server_name  localhost;  # 服务名称</p><p>​        location &#x2F; {<br>​            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;  # 资源存放的根目录<br>​            index  index.html index.htm;  # 默认访问页面<br>​        }</p><pre><code>    # 错误页面配置</code></pre><p>​        error_page   500 502 503 504  &#x2F;50x.html;<br>​        location &#x3D; &#x2F;50x.html {<br>​            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;<br>​        }</p><pre><code>    # 反向代理配置示例</code></pre><p>​        location &#x2F;app {<br>​            proxy_pass <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a>;  # 转发请求到后端服务器<br>​            proxy_set_header Host $host;<br>​            proxy_set_header X-Real-IP $remote_addr;<br>​            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>​        }</p><pre><code>    # 负载均衡配置示例</code></pre><p>​        upstream myapp1 {<br>​            server backend1.example.com weight&#x3D;5;<br>​            server backend2.example.com;<br>​        }</p><p>​        server {<br>​            listen 80;<br>​            server_name myapp.example.com;</p><p>​            location &#x2F; {<br>​                proxy_pass <a href="http://myapp1/">http://myapp1</a>;  # 使用上面定义的upstream<br>​            }<br>​        }<br>​    }<br>}</p></blockquote></li><li><p><strong>第一部分：全局块</strong></p><ol><li><p><strong>作用：从配置文件开始到 events 块之间的内容，主要会设置一些影响nginx 服务器整体运行的配置指令，主要包括配 置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以 及配置文件的引入等。</strong><br><em>比如上面第二、五行配置的</em></p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker<span class="emphasis">_processes  auto;</span></span><br></pre></td></tr></table></figure></blockquote><p>这是 Nginx 服务器并发处理服务的关键配置，<strong>worker_processes 值越大，可以支持的并发处理量也越多</strong>，但是会受到硬件、软件等设备的制约。<strong>因此，*建议设置为等于CPU总核心数。*</strong></p></li></ol></li><li><p><strong>第二部分：events块</strong></p><ol><li><p>**作用：events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否 允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。<br>**下图例子就表示每个 work process 支持的最大连接数为 1024。 <strong>这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</strong></p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker<span class="emphasis">_connections  1024;</span></span><br></pre></td></tr></table></figure></blockquote></li></ol></li><li><p><strong>第三部分：http块</strong></p><ol><li><p><strong>这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</strong></p><p><strong>需要注意的是：http 块也可以包括 http 全局块、server 块。</strong><br>①、http 全局块</p><p>​    http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p><p>②、server 块</p><p>​    这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。**&#x3D;&#x3D;每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。&#x3D;&#x3D;**</p><ol><li><p>全局 server 块</p><p>​    最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p></li><li><p>location 块</p><p>​    一个 server 块可以配置多个 location 块。</p><p>​    这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name&#x2F;uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 &#x2F;uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。<img src="https://zscbdic.cn/upload/640-ombc.webp" alt="img"></p></li></ol></li></ol></li></ol></li><li><p><strong>Nginx核心参数配置的详细说明。</strong></p><h3 id="2-1、全局块"><a href="#2-1、全局块" class="headerlink" title="2.1、全局块"></a><strong>2.1、全局块</strong></h3><ol><li><strong>worker_processes</strong><ul><li><strong>作用</strong>：设置工作进程的数量。</li><li><strong>配置示例</strong>：<code>worker_processes auto;</code> 或 <code>worker_processes 4;</code></li><li><strong>说明</strong>：通常建议设置为机器的CPU核心数或核心数减1，也可以设置为<code>auto</code>让Nginx自动检测。</li></ul></li><li><strong>worker_rlimit_nofile</strong><ul><li><strong>作用</strong>：设置每个worker进程可以打开的最大文件描述符数（文件句柄）。</li><li><strong>配置示例</strong>：<code>worker_rlimit_nofile 65535;</code></li><li><strong>说明</strong>：此值应足够大以支持预期的并发连接数。</li></ul></li></ol><h3 id="2-2、Events块"><a href="#2-2、Events块" class="headerlink" title="2.2、Events块"></a><strong>2.2、Events块</strong></h3><ol><li><strong>worker_connections</strong><ul><li><strong>作用</strong>：设置每个worker进程的最大并发连接数。</li><li><strong>配置示例</strong>：<code>worker_connections 1024;</code></li><li><strong>说明</strong>：Nginx服务器的最大连接数等于<code>worker_processes * worker_connections</code>。</li></ul></li><li><strong>use</strong><ul><li><strong>作用</strong>：指定Nginx使用的事件驱动模型。</li><li><strong>配置示例</strong>：<code>use epoll;</code></li><li><strong>说明</strong>：Linux系统推荐使用epoll，它是完全的事件机制，可以实现多路IO复用。</li></ul></li><li><strong>multi_accept</strong><ul><li><strong>作用</strong>：控制是否启用“接收新连接”的多路复用。</li><li><strong>配置示例</strong>：<code>multi_accept on;</code></li><li><strong>说明</strong>：当设置为<code>on</code>时，Nginx允许多个worker进程同时接受新连接，提高并发处理能力。</li></ul></li></ol><h3 id="2-3、Http块"><a href="#2-3、Http块" class="headerlink" title="2.3、Http块"></a><strong>2.3、Http块</strong></h3><ol><li><strong>client_header_buffer_size</strong><ul><li><strong>作用</strong>：设置客户端请求的请求行+请求头缓冲区大小。</li><li><strong>配置示例</strong>：<code>client_header_buffer_size 4k;</code></li><li><strong>说明</strong>：默认值是1k或4k，取决于操作系统。</li></ul></li><li><strong>large_client_header_buffers</strong><ul><li><strong>作用</strong>：设置Nginx服务器接收和缓存客户端请求头的缓冲区的大小。</li><li><strong>配置示例</strong>：<code>large_client_header_buffers 4 8k;</code></li><li><strong>说明</strong>：用于处理大型或包含大量请求头的客户端请求。</li></ul></li><li><strong>client_header_timeout</strong><ul><li><strong>作用</strong>：定义Nginx读取客户端请求头部的超时时间。</li><li><strong>配置示例</strong>：<code>client_header_timeout 60s;</code></li><li><strong>说明</strong>：如果客户端在这段时间内没有发送完请求头，则连接将被关闭。</li></ul></li><li><strong>keepalive_timeout</strong><ul><li><strong>作用</strong>：设置长连接的超时时间。</li><li><strong>配置示例</strong>：<code>keepalive_timeout 65;</code></li><li><strong>说明</strong>：如果设置为0，则表示禁用长连接。</li></ul></li><li><strong>gzip</strong><ul><li><strong>作用</strong>：开启或关闭gzip压缩功能。</li><li><strong>配置示例</strong>：<code>gzip on;</code></li><li><strong>说明</strong>：开启gzip可以减小传输数据量，提高网页加载速度。</li></ul></li><li><strong>proxy_pass</strong><ul><li><strong>作用</strong>：将请求转发到后端服务器。</li><li><strong>配置示例</strong>：<code>location / &#123; proxy_pass http://backend; &#125;</code></li><li><strong>说明</strong>：常用于反向代理和负载均衡场景。</li></ul></li></ol><h3 id="2-4、其他重要配置"><a href="#2-4、其他重要配置" class="headerlink" title="2.4、其他重要配置"></a><strong>2.4、其他重要配置</strong></h3><ol><li><strong>server_name</strong><ul><li><strong>作用</strong>：定义虚拟主机的名称。</li><li><strong>配置示例</strong>：<code>server_name www.example.com;</code></li><li><strong>说明</strong>：Nginx根据server_name来区分不同的虚拟主机。</li></ul></li><li><strong>listen</strong><ul><li><strong>作用</strong>：指定Nginx监听的端口。</li><li><strong>配置示例</strong>：<code>listen 80;</code></li><li><strong>说明</strong>：Nginx默认监听80端口。</li></ul></li><li><strong>error_log</strong><ul><li><strong>作用</strong>：设置错误日志文件的路径和级别。</li><li><strong>配置示例</strong>：<code>error_log /var/log/nginx/error.log warn;</code></li><li><strong>说明</strong>：日志级别有debug、info、notice、warn、error、crit、alert、emerg等。</li></ul></li><li><strong>access_log</strong><ul><li><strong>作用</strong>：设置访问日志文件的路径和格式。</li><li><strong>配置示例</strong>：<code>access_log /var/log/nginx/access.log main;</code></li><li><strong>说明</strong>：通过访问</li></ul></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol><li><strong>配置文件结构</strong>：Nginx的配置文件（nginx.conf）通常包含全局块、events块、http块等，其中http块可以包含多个server块，每个server块又可以包含多个location块。</li><li><strong>日志和错误处理</strong>：合理配置日志和错误处理对于监控和调试Nginx服务至关重要。</li><li><strong>性能优化</strong>：通过调整worker_processes、worker_connections等参数，可以优化Nginx的性能。</li><li><strong>安全性</strong>：合理配置SSL&#x2F;TLS、限制请求速率、设置访问控制等，可以提高Nginx服务的安全性。</li></ol></li></ol><h1 id="六、最简单的上线（初步尝试部署vue项目【已打包好的】）（本文章默认Nginx已安装，且是在Linux系统，windows都差不多）"><a href="#六、最简单的上线（初步尝试部署vue项目【已打包好的】）（本文章默认Nginx已安装，且是在Linux系统，windows都差不多）" class="headerlink" title="六、最简单的上线（初步尝试部署vue项目【已打包好的】）（本文章默认Nginx已安装，且是在Linux系统，windows都差不多）"></a>六、最简单的上线（初步尝试部署vue项目【已打包好的】）（本文章默认Nginx已安装，且是在Linux系统，windows都差不多）</h1><p>以上，我们就知道了nginx整体大致的结构，以及每部分的结构是用于做什么的。接下来我们就修改nginx关键位置来实现我们网站的代理功能。看着nginx配置很繁琐，但是如果你只是需要上线一个网站，那么你只需要去修改两个地方即可：</p><p><img src="https://zscbdic.cn/upload/640(2)-nuif.webp" alt="img"></p><p>我们可以使用默认简单的配置，然后指定&#x3D;&#x3D;<strong>server_name</strong>和<strong>root</strong>&#x3D;&#x3D;，主要是告诉nginx代理的ip是xxx，然后我放在服务器的文件在bbb文件夹即可。nginx便会在用户访问这个ip时，自动的将bbb文件夹中的index.html返回到浏览器来展示页面。</p><h1 id="七、Nginx部分页面优化"><a href="#七、Nginx部分页面优化" class="headerlink" title="七、Nginx部分页面优化"></a>七、Nginx部分页面优化</h1><ol><li><p><strong>前端history模式404问题：</strong></p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"><span class="code">    try_files $uri $uri/ /index.html;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>这段代码的作用是，当用户刷新页面时，Nginx会先检查当前URL是否存在，如果不存在，就会尝试访问index.html，从而可以正常显示页面。</strong></p></li><li><p><strong>反向代理：</strong></p><p>相信大家作为前端都了解跨域问题，目前前端的主流解决跨域的方式就是</p><ol><li>开发生产cors解决</li><li>开发proxy，生产nginx解决。</li></ol><p>如何配置：</p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 接口端</span></span><br><span class="line">location /police/ &#123;</span><br><span class="line"><span class="code">    proxy_pass   http://192.168.1.182:8852/police/;</span></span><br><span class="line"><span class="code">    proxy_redirect default;</span></span><br><span class="line"><span class="code">    proxy_http_version 1.1;</span></span><br><span class="line"><span class="code">    proxy_connect_timeout   60;</span></span><br><span class="line"><span class="code">    proxy_send_timeout      60;</span></span><br><span class="line"><span class="code">    proxy_read_timeout      90;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>具体位置：</strong><br><img src="https://zscbdic.cn/upload/640.png" alt="img"><br><strong>理解：</strong></p><p>这段代码的意思：大致就是如果遇到以&#x2F;police请求开头的接口，那么就去访问这个ip地址(<a href="http://192.168.1.182:8852/police/)%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AB%AF%E5%8F%A3%E3%80%82">http://192.168.1.182:8852/police/)的后台端口。</a></p><p>例如我们通过axios去访问&#x2F;police&#x2F;getList这个后台接口时，nginx会将这个请求转发到ip端口为<a href="http://192.168.1.182:8852的后台中，后台将结果返回给nginx，nginx再把结果给到浏览器，实现反向代理。">http://192.168.1.182:8852的后台中，后台将结果返回给nginx，nginx再把结果给到浏览器，实现反向代理。</a></p><p><strong>定义多个端口的反向代理：</strong></p><p>copy上面的，直接修改代理头和proxy_pass即可。<br><img src="/upload/%E5%9B%BE%E7%89%87.png" alt="img"></p></li><li><p><strong>开启gzip：</strong></p><p><strong>作用：</strong></p><p>开启gzip对于前端来说还是比较重要的，浏览器加载的包大概能节约一半的空间。例如首页需要加载a.js文件，该文件为900kb，在开启gzip之后，浏览器会去加载a.js经过gzip之后的文件a.js.gz，大概只有450kb，能够很好的提升浏览速度。</p><p><strong>如何配置：</strong></p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gzip on; # 默认off，是否开启gzip</span><br><span class="line">gzip<span class="emphasis">_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># 上面两个开启基本就能跑起了，下面的愿意折腾就了解一下</span></span><br><span class="line"><span class="emphasis">gzip_</span>static on;</span><br><span class="line">gzip<span class="emphasis">_proxied any;</span></span><br><span class="line"><span class="emphasis">gzip_</span>vary on;</span><br><span class="line">gzip<span class="emphasis">_comp_</span>level 6;</span><br><span class="line">gzip<span class="emphasis">_buffers 16 8k;</span></span><br><span class="line"><span class="emphasis"># gzip_</span>min<span class="emphasis">_length 1k;</span></span><br><span class="line"><span class="emphasis">gzip_</span>http<span class="emphasis">_version 1.1;</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>具体位置：</strong><br><img src="https://zscbdic.cn/upload/%E5%9B%BE%E7%89%87-emlp.png" alt="img"></p></li><li><p><strong>维护页面：</strong><br><strong>作用：</strong></p><p>在系统进行维护升级时，用户打开我们的网站看到的维护页面。</p><p><strong>如何配置：</strong></p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 系统临时维护请打开下面这行注释，并重启nginx,维护完毕后请注释下年这行,并重启nginx</span></span><br><span class="line"><span class="section"># rewrite ^(.<span class="emphasis">*)$ /maintainace.html break;</span></span></span><br></pre></td></tr></table></figure></blockquote><p><strong>具体位置：</strong><br><img src="https://zscbdic.cn/upload/%E5%9B%BE%E7%89%87%20(1).png" alt="img"></p></li><li><p><strong>一个ip上线多个网站：</strong></p><p><strong>作用：</strong></p><p>只有一个ip。利用nginx上线多个网站。例如访问192.168.1.154:8080访问我们的个人博客网站，访问192.168.1.154:8081访问我们的直播网站。</p><p><strong>如何配置：</strong></p><p>直接复制server块即可，一个server块就代表了一个网站，需要改端口和文件的路径等内容。</p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 第一个网站：个人博客项目配置</span></span><br><span class="line">  server &#123;</span><br><span class="line">   listen       8080;</span><br><span class="line">   root         /data/www/hexo;</span><br><span class="line">   index        index.html;</span><br><span class="line">   location / &#123;</span><br><span class="line"><span class="code">    try_files $uri $uri/ /index.html; # 路由模式history的修改</span></span><br><span class="line"><span class="code">   &#125;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"> # 第二个网站：直播网站项目配置</span><br><span class="line"> server &#123;</span><br><span class="line">  listen       8081;</span><br><span class="line">  root         /data/www/geov;</span><br><span class="line">  index        index.html;</span><br><span class="line">  location / &#123;&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>具体位置：</strong><br><img src="https://zscbdic.cn/upload/%E5%9B%BE%E7%89%87%20(2).png" alt="img"><br><strong>注意点：</strong></p><ol><li>这里的8081一定要你的服务器开放了这个端口才可以使用，否则你按照这个配置了也会访问不到（让后端去配）。</li><li>如果是云服务器（比如阿里云，腾讯云），则需要开放相应的入口为8081，否则用户访问不到。</li></ol></li><li><p><strong>动静分离</strong></p><p><strong>作用：</strong></p><p>在Web开发中，通常来说，动态资源其实就是指那些后台资源，而静态资源就是指HTML，JavaScript，CSS，img等文件。</p><p>一般来说，都需要将动态资源和静态资源分开，将静态资源部署在Nginx上，当一个请求来的时候，如果是静态资源的请求，就直接到nginx配置的静态资源目录下面获取资源，如果是动态资源的请求，nginx利用反向代理的原理，把请求转发给后台应用去处理，从而实现动静分离。</p><p>在使用前后端分离之后，可以很大程度的提升静态资源的访问速度，同时在开过程中也可以让前后端开发并行可以有效的提高开发时间，也可以有些的减少联调时间 。</p><p><strong>解析：</strong></p><p>实际上我们在代理前端的html和接口时就已经做到了动静分离。我们打包后的dist包实际上就是纯静态的资源，所以直接访问nginx静态资源服务器，就不需要经过后台的tomcat。访问接口时，就需要nginx先去访问后台服务器，拿到结果再给到浏览器<br><img src="https://zscbdic.cn/upload/%E5%9B%BE%E7%89%87%20(3).png" alt="img"><br><strong>图解：</strong></p><img src="/posts/d7386c6d/"  alt="img" style="zoom:150%;" />**如何配置（其实是优化，因为一般配置会有动静分离)：**<p>假设有比较大的图片等需要放置到服务器上，然后通过nginx来转发。或者是有一个纯前端的开源项目（如pdf.js），也需要放在服务器上。如果放在本地代码包，打包出来体积会很大。</p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location /image/ &#123;</span><br><span class="line">  root   /var/filecenter/;</span><br><span class="line">&#125;</span><br><span class="line">location /static/ &#123;</span><br><span class="line">  root   /var/filecenter/;</span><br><span class="line">&#125;</span><br><span class="line">location /car/ &#123;</span><br><span class="line">  root   /var/filecenter/;</span><br><span class="line">&#125;</span><br><span class="line">location ~ .<span class="emphasis">*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ &#123;</span></span><br><span class="line"><span class="emphasis">  root /Users/dalaoyang/Downloads/static;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>具体位置：</strong><br><img src="https://zscbdic.cn/upload/%E5%9B%BE%E7%89%87%20(5).png" alt="img"></p></li></ol><p><strong>这里只讲了一些nginx基础的知识和一些基础的优化，基本上够用了。但是如果你需要追求更高的性能，那么可以添加其他的优化。nginx主要还是配置多一些，但是理解了整体结构和脉络的话，其实就还是蛮简单的。这里就不做过多的讲解了。</strong></p><h1 id="八、Nginx基础命令：安装、启动、重启、关闭"><a href="#八、Nginx基础命令：安装、启动、重启、关闭" class="headerlink" title="八、Nginx基础命令：安装、启动、重启、关闭"></a>八、Nginx基础命令：安装、启动、重启、关闭</h1><p>安装nginx：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure></blockquote><p>看是否有nginx进程：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anput | grep nginx</span><br></pre></td></tr></table></figure></blockquote><p>查看服务器端口占用情况：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure></blockquote><p>nginx启动:</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure></blockquote><p>nginx重启:</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></blockquote><p>关闭nginx：</p><ul><li><code>nginx -s stop</code> : 快速停止nginx</li><li><code>nginx -s quit</code> ：完整有序的停止nginx</li></ul><p>查看默认的nginx配置文件路径：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>注：如果有nginx.conf配置的更改，需要重启nginx配置才会生效。如果只是更改dist包&#x2F;html，则可以不重启nginx。</p></blockquote><h1 id="九、Nginx的性能优化"><a href="#九、Nginx的性能优化" class="headerlink" title="九、Nginx的性能优化"></a>九、Nginx的性能优化</h1><h3 id="1-调整工作进程数"><a href="#1-调整工作进程数" class="headerlink" title="1. 调整工作进程数"></a><strong>1. <strong>调整工作进程数</strong></strong></h3><p>Nginx的worker_processes指令控制工作进程的数量，通常设置为CPU核心数。这样可以充分利用服务器的多核处理能力。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes auto;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-优化工作进程设置"><a href="#2-优化工作进程设置" class="headerlink" title="2. 优化工作进程设置"></a><strong>2. <strong>优化工作进程设置</strong></strong></h3><p>通过调整worker_connections指令，可以增加每个工作进程可以处理的最大连接数。这有助于提高并发处理能力。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-启用Gzip压缩"><a href="#3-启用Gzip压缩" class="headerlink" title="3. 启用Gzip压缩"></a><strong>3. <strong>启用Gzip压缩</strong></strong></h3><p>启用Gzip压缩可以减少传输数据的大小，从而提高页面加载速度。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-配置缓存"><a href="#4-配置缓存" class="headerlink" title="4. 配置缓存"></a><strong>4. <strong>配置缓存</strong></strong></h3><p>配置缓存可以减少后端服务器的负担并提高响应速度。使用proxy_cache和相关指令进行缓存设置。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    proxy_cache_path /tmp/cache levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend_server;</span><br><span class="line">            proxy_cache my_cache;</span><br><span class="line">            proxy_cache_valid 200 1m;</span><br><span class="line">            proxy_cache_valid 404 1m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="5-使用负载均衡"><a href="#5-使用负载均衡" class="headerlink" title="5. 使用负载均衡"></a><strong>5. <strong>使用负载均衡</strong></strong></h3><p>负载均衡可以分散请求到多个后端服务器，从而提高应用的可用性和性能。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server backend1.example.com;</span><br><span class="line">        server backend2.example.com;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="6-调整连接超时设置"><a href="#6-调整连接超时设置" class="headerlink" title="6. 调整连接超时设置"></a><strong>6. <strong>调整连接超时设置</strong></strong></h3><p>通过合理设置连接超时，可以释放未使用的资源，保持服务器高效运行。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    client_header_timeout 10s;</span><br><span class="line">    client_body_timeout 10s;</span><br><span class="line">    send_timeout 10s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="7-禁用不必要的模块"><a href="#7-禁用不必要的模块" class="headerlink" title="7. 禁用不必要的模块"></a><strong>7. <strong>禁用不必要的模块</strong></strong></h3><p>禁用不必要的模块可以减少内存使用并提高性能。可以在编译Nginx时选择性地启用所需的模块。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --without-http_autoindex_module --without-http_auth_basic_module</span><br></pre></td></tr></table></figure></blockquote><h3 id="8-优化文件描述符限制"><a href="#8-优化文件描述符限制" class="headerlink" title="8. 优化文件描述符限制"></a><strong>8. <strong>优化文件描述符限制</strong></strong></h3><p>增加文件描述符限制可以提高Nginx的并发处理能力。在&#x2F;etc&#x2F;security&#x2F;limits.conf文件中设置：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure></blockquote><p>通过以上优化步骤，你可以显著提高Nginx的性能。这些调整不仅能提高处理能力，还能改善用户体验。务必根据实际负载和需求测试和调整配置，以达到最佳效果。</p><h1 id="十、项目部署（加ssl证书）【ps：以下的配置基于SmartAdmin框架】"><a href="#十、项目部署（加ssl证书）【ps：以下的配置基于SmartAdmin框架】" class="headerlink" title="十、项目部署（加ssl证书）【ps：以下的配置基于SmartAdmin框架】"></a>十、项目部署（加ssl证书）【ps：以下的配置基于SmartAdmin框架】</h1><p>http与https的差异与作用这里不加赘述，请自行学习！</p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">user  www www;</span><br><span class="line">worker<span class="emphasis">_processes auto;</span></span><br><span class="line"><span class="emphasis">error_</span>log  /www/wwwlogs/nginx<span class="emphasis">_error.log  crit;</span></span><br><span class="line"><span class="emphasis">pid        /www/server/nginx/logs/nginx.pid;</span></span><br><span class="line"><span class="emphasis">worker_</span>rlimit<span class="emphasis">_nofile 51200;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">stream &#123;</span></span><br><span class="line"><span class="emphasis">    log_</span>format tcp<span class="emphasis">_format &#x27;$time_</span>local|$remote<span class="emphasis">_addr|$protocol|$status|$bytes_</span>sent|$bytes<span class="emphasis">_received|$session_</span>time|$upstream<span class="emphasis">_addr|$upstream_</span>bytes<span class="emphasis">_sent|$upstream_</span>bytes<span class="emphasis">_received|$upstream_</span>connect<span class="emphasis">_time&#x27;;</span></span><br><span class="line"><span class="emphasis">  </span></span><br><span class="line"><span class="emphasis">    access_</span>log /www/wwwlogs/tcp-access.log tcp<span class="emphasis">_format;</span></span><br><span class="line"><span class="emphasis">    error_</span>log /www/wwwlogs/tcp-error.log;</span><br><span class="line"><span class="code">    include /www/server/panel/vhost/nginx/tcp/*.conf;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">events</span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        use epoll;</span></span><br><span class="line"><span class="code">        worker_connections 32000;</span></span><br><span class="line"><span class="code">        multi_accept on;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">http</span><br><span class="line"><span class="code">    &#123;</span></span><br><span class="line"><span class="code">        include       mime.types;</span></span><br><span class="line"><span class="code">    #include luawaf.conf;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    include proxy.conf;</span></span><br><span class="line"><span class="code">        lua_package_path &quot;/www/server/nginx/lib/lua/?.lua;;&quot;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        default_type  application/octet-stream;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        server_names_hash_bucket_size 512;</span></span><br><span class="line"><span class="code">        client_header_buffer_size 32k;</span></span><br><span class="line"><span class="code">        large_client_header_buffers 4 32k;</span></span><br><span class="line"><span class="code">        client_max_body_size 50m;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        sendfile   on;</span></span><br><span class="line"><span class="code">        tcp_nopush on;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        # 通过合理设置连接超时，可以释放未使用的资源，保持服务器高效运行。</span></span><br><span class="line"><span class="code">        keepalive_timeout 60;</span></span><br><span class="line"><span class="code">        client_header_timeout 10s;</span></span><br><span class="line"><span class="code">        client_body_timeout 10s;</span></span><br><span class="line"><span class="code">        send_timeout 10s;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        tcp_nodelay on;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        fastcgi_connect_timeout 300;</span></span><br><span class="line"><span class="code">        fastcgi_send_timeout 300;</span></span><br><span class="line"><span class="code">        fastcgi_read_timeout 300;</span></span><br><span class="line"><span class="code">        fastcgi_buffer_size 64k;</span></span><br><span class="line"><span class="code">        fastcgi_buffers 4 64k;</span></span><br><span class="line"><span class="code">        fastcgi_busy_buffers_size 128k;</span></span><br><span class="line"><span class="code">        fastcgi_temp_file_write_size 256k;</span></span><br><span class="line"><span class="code">    fastcgi_intercept_errors on;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        gzip on;</span></span><br><span class="line"><span class="code">        gzip_min_length  1k;</span></span><br><span class="line"><span class="code">        gzip_buffers     4 16k;</span></span><br><span class="line"><span class="code">        gzip_http_version 1.1;</span></span><br><span class="line"><span class="code">        gzip_comp_level 5;</span></span><br><span class="line"><span class="code">        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/json image/jpeg image/gif image/png font/ttf font/otf image/svg+xml application/xml+rss text/x-js;</span></span><br><span class="line"><span class="code">        gzip_vary on;</span></span><br><span class="line"><span class="code">        gzip_proxied   expired no-cache no-store private auth;</span></span><br><span class="line"><span class="code">        gzip_disable   &quot;MSIE [1-6]\.&quot;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        limit_conn_zone $binary_remote_addr zone=perip:10m;</span></span><br><span class="line"><span class="code">    limit_conn_zone $server_name zone=perserver:10m;</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    # 配置缓存可以减少后端服务器的负担并提高响应速度。使用proxy_cache和相关指令进行缓存设置。</span></span><br><span class="line"><span class="code">    proxy_cache_path /tmp/cache levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="code">        server_tokens off;</span></span><br><span class="line"><span class="code">        access_log off;</span></span><br><span class="line"><span class="code">        server &#123;</span></span><br><span class="line"><span class="code">            listen 80;  </span></span><br><span class="line"><span class="code">            server_name pionnermes.zscbdic.cn;</span></span><br><span class="line"><span class="code">            # 将请求转成https</span></span><br><span class="line"><span class="code">            rewrite ^/(.*) https://$server_name$request_uri? permanent;</span></span><br><span class="line"><span class="code">            location / &#123;</span></span><br><span class="line"><span class="code">              root /www/wwwroot/pionnermes.zscbdic.cn/;</span></span><br><span class="line"><span class="code">              try_files $uri $uri/ /index.html last;</span></span><br><span class="line"><span class="code">              index  index.html index.htm;</span></span><br><span class="line"><span class="code">              expires -1;</span></span><br><span class="line"><span class="code">              # 防盗链</span></span><br><span class="line"><span class="code">              valid_referers none blocked server_names *.pionnermes.zscbdic.cn;</span></span><br><span class="line"><span class="code">              if ($invalid_referer) &#123;</span></span><br><span class="line"><span class="code">                return 403;</span></span><br><span class="line"><span class="code">              &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            </span></span><br><span class="line"><span class="code">            # 系统临时维护请打开下面这行注释，并重启nginx,维护完毕后请注释下年这行,并重启nginx</span></span><br><span class="line"><span class="code">            # rewrite ^(.*)$ /maintainace.html break;</span></span><br><span class="line"><span class="code">          </span></span><br><span class="line"><span class="code">            # 缓存文件，提高性能</span></span><br><span class="line"><span class="code">            location ~* \.(jpg|jpeg|png|gif)$ &#123;</span></span><br><span class="line"><span class="code">              expires 30d;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            location ~* \.(css|js)$ &#123;</span></span><br><span class="line"><span class="code">              expires 600;</span></span><br><span class="line"><span class="code">              add_header Cache-control max-age=800;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        server &#123;</span></span><br><span class="line"><span class="code">            listen 443 ssl;</span></span><br><span class="line"><span class="code">            server_name pionnermes.zscbdic.cn;  # 访问静态资源服务器</span></span><br><span class="line"><span class="code">            root /www/wwwroot/pionnermes.zscbdic.cn/;</span></span><br><span class="line"><span class="code">            index index.html index.htm index.php;</span></span><br><span class="line"><span class="code">            </span></span><br><span class="line"><span class="code">            # 证书配置</span></span><br><span class="line"><span class="code">            ssl_certificate   /www/wwwroot/ssh/pionnermes.zscbdic.cn_bundle.pem;</span></span><br><span class="line"><span class="code">            ssl_certificate_key  /www/wwwroot/ssh/pionnermes.zscbdic.cn.key;</span></span><br><span class="line"><span class="code">            # ssl验证相关配置</span></span><br><span class="line"><span class="code">            ssl_session_timeout 5m;</span></span><br><span class="line"><span class="code">            # 加密算法</span></span><br><span class="line"><span class="code">            ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span></span><br><span class="line"><span class="code">            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span></span><br><span class="line"><span class="code">            ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="code">            # 配置 gzip 压缩</span></span><br><span class="line"><span class="code">            gzip on;</span></span><br><span class="line"><span class="code">            gzip_min_length 1k;</span></span><br><span class="line"><span class="code">            gzip_buffers 4 16k;</span></span><br><span class="line"><span class="code">            gzip_comp_level 5;</span></span><br><span class="line"><span class="code">            gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span></span><br><span class="line"><span class="code">            gzip_vary on;</span></span><br><span class="line"><span class="code">            gzip_disable &quot;MSIE [1-6]\.&quot;;</span></span><br><span class="line"><span class="code">            # 禁用 OPTIONS 请求</span></span><br><span class="line"><span class="code">            if ($request_method ~* OPTIONS) &#123;</span></span><br><span class="line"><span class="code">                return 403;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            # 前端配置</span></span><br><span class="line"><span class="code">            location / &#123;</span></span><br><span class="line"><span class="code">              root /www/wwwroot/pionnermes.zscbdic.cn/;</span></span><br><span class="line"><span class="code">              try_files $uri $uri/ /index.html last;</span></span><br><span class="line"><span class="code">              index  index.html index.htm;</span></span><br><span class="line"><span class="code">              expires -1;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            # 系统临时维护请打开下面这行注释，并重启nginx,维护完毕后请注释下年这行,并重启nginx</span></span><br><span class="line"><span class="code">            # rewrite ^(.*)$ /maintainace.html break;</span></span><br><span class="line"><span class="code">            </span></span><br><span class="line"><span class="code">            # 缓存文件，提高性能</span></span><br><span class="line"><span class="code">            location ~* \.(jpg|jpeg|png|gif)$ &#123;</span></span><br><span class="line"><span class="code">              expires 30d;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            location ~* \.(css|js)$ &#123;</span></span><br><span class="line"><span class="code">              expires 600;</span></span><br><span class="line"><span class="code">              add_header Cache-control max-age=800;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            # 通过配置网站服务器进行输出压缩，可以减少http响应传输的数据量，从而提高网站页面的加载速度。</span></span><br><span class="line"><span class="code">            location ~ .*\.(jpg|gif|png|js)$ &#123;</span></span><br><span class="line"><span class="code">              gzip on;</span></span><br><span class="line"><span class="code">              gzip_http_version 1.1;</span></span><br><span class="line"><span class="code">              gzip_comp_level 5; # 压缩级别，默认1，最高9</span></span><br><span class="line"><span class="code">              gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif img/png;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            </span></span><br><span class="line"><span class="code">            # 后端配置</span></span><br><span class="line"><span class="code">            location /pioneer-mes &#123;</span></span><br><span class="line"><span class="code">            #反向代理的java地址</span></span><br><span class="line"><span class="code">              proxy_pass http://pionnermes.zscbdic.cn:8080/pioneer-mes;</span></span><br><span class="line"><span class="code">              # 假设你的后端服务运行在本地的8080端口</span></span><br><span class="line"><span class="code">          # 传递客户端IP和协议</span></span><br><span class="line"><span class="code">              proxy_set_header  Host             $host;</span></span><br><span class="line"><span class="code">              proxy_set_header  X-Real-IP        $remote_addr;</span></span><br><span class="line"><span class="code">              set $my_proxy_add_x_forwarded_for $proxy_add_x_forwarded_for;</span></span><br><span class="line"><span class="code">              if ($proxy_add_x_forwarded_for ~* &quot;127.0.0.1&quot;)&#123;</span></span><br><span class="line"><span class="code">                set $my_proxy_add_x_forwarded_for $remote_addr;</span></span><br><span class="line"><span class="code">              &#125;</span></span><br><span class="line"><span class="code">              proxy_set_header   X-Forwarded-For $my_proxy_add_x_forwarded_for;   </span></span><br><span class="line"><span class="code">              #此处是https访问的关键环节</span></span><br><span class="line"><span class="code">              proxy_redirect off;</span></span><br><span class="line"><span class="code">            #设置没有缓存[此处很重要，必须设置，不然有些浏览器对get请求会缓存，引发不必要的bug]</span></span><br><span class="line"><span class="code">              expires -1;</span></span><br><span class="line"><span class="code">        #一些安全配置</span></span><br><span class="line"><span class="code">              add_header Set-Cookie &quot;Path=/; HttpOnly; Secure&quot;;</span></span><br><span class="line"><span class="code">              add_header X-Content-Type-Options &quot;nosniff&quot;;</span></span><br><span class="line"><span class="code">              add_header X-XSS-Protection &quot;1; mode=block&quot;;</span></span><br><span class="line"><span class="code">              #设置跨域方法</span></span><br><span class="line"><span class="code">              # add_header Access-Control-Allow-Origin *;</span></span><br><span class="line"><span class="code">              add_header X-Frame-Options &quot;ALLOW-FROM pionnermes.zscbdic.cn&quot;;</span></span><br><span class="line"><span class="code">             add_header Content-Security-Policy &quot;frame-ancestors pionnermes.zscbdic.cn&quot;;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            </span></span><br><span class="line"><span class="code">            # 后端api swagger和knife4j配置</span></span><br><span class="line"><span class="code">            location /v3/api-docs/ &#123;</span></span><br><span class="line"><span class="code">           proxy_pass  http://pionnermes.zscbdic.cn:8080/pioneer-mes/v3/api-docs/;</span></span><br><span class="line"><span class="code">           proxy_redirect    off;</span></span><br><span class="line"><span class="code">           proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span></span><br><span class="line"><span class="code">           proxy_set_header  X-Real-IP  $remote_addr;</span></span><br><span class="line"><span class="code">           proxy_set_header  Host $http_host;</span></span><br><span class="line"><span class="code">           #一些安全配置</span></span><br><span class="line"><span class="code">               add_header Set-Cookie &quot;Path=/; HttpOnly; Secure&quot;;</span></span><br><span class="line"><span class="code">               add_header X-Content-Type-Options &quot;nosniff&quot;;</span></span><br><span class="line"><span class="code">               add_header X-XSS-Protection &quot;1; mode=block&quot;;</span></span><br><span class="line"><span class="code">           add_header X-Frame-Options &quot;ALLOW-FROM pionnermes.zscbdic.cn&quot;;</span></span><br><span class="line"><span class="code">           add_header Content-Security-Policy &quot;frame-ancestors pionnermes.zscbdic.cn&quot;;</span></span><br><span class="line"><span class="code">           expires -1;</span></span><br><span class="line"><span class="code">          &#125;</span></span><br><span class="line"><span class="code">          error_page   500 502 503 504  /50x.html;</span></span><br><span class="line"><span class="code">            location = /50x.html &#123;</span></span><br><span class="line"><span class="code">                root   html;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            </span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line"><span class="code">include /www/server/panel/vhost/nginx/*.conf;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="扩展：Nginx-中-proxy-pass-末尾斜杠的奥秘"><a href="#扩展：Nginx-中-proxy-pass-末尾斜杠的奥秘" class="headerlink" title="扩展：Nginx 中 proxy_pass 末尾斜杠的奥秘"></a>扩展：<strong>Nginx 中 proxy_pass 末尾斜杠的奥秘</strong></h1><h4 id="一、proxy-pass-的类型概述"><a href="#一、proxy-pass-的类型概述" class="headerlink" title="一、proxy_pass 的类型概述"></a><strong>一、proxy_pass 的类型概述</strong></h4><p>Nginx 的官网将 proxy_pass 分为两种类型：不带 URI 方式和带 URI 方式。</p><p>不带 URI 方式只包含 IP 和端口号，例如 proxy_pass <a href="http://localhost:8080。而带">http://localhost:8080。而带</a> URI 方式在端口号之后有其他路径，<strong>包括只有单个 “&#x2F;” 的</strong>，如 proxy_pass <a href="http://localhost:8080/%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E8%B7%AF%E5%BE%84%EF%BC%8C%E6%AF%94%E5%A6%82">http://localhost:8080/，以及其他路径，比如</a> proxy_pass <a href="http://localhost:8080/xxx%E3%80%82">http://localhost:8080/xxx。</a></p><p>这两种类型的处理方式有很大不同，理解它们的区别对于正确配置 Nginx 反向代理至关重要。</p><p><strong>1、 在不带 URI 方式下，nginx 将会保留 location 中路径部分</strong>，当访问 <a href="http://localhost/api1/xxx">http://localhost/api1/xxx</a> 时，若配置为</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /api1/ &#123;</span><br><span class="line">proxy_pass http://localhost:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>会代理到 <a href="http://localhost:8080/api1/xxx">http://localhost:8080/api1/xxx</a></p><p><strong>2、 在带 URI 方式下，nginx 将使用诸如 alias 的替换方式对 URL 进行替换</strong>，例如当访问 <a href="http://localhost/api2/xxx">http://localhost/api2/xxx</a> 时，若配置为</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /api2/ &#123;</span><br><span class="line">  proxy_pass http://localhost:8080/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><a href="http://localhost/api2/%EF%BC%88%E6%B3%A8%E6%84%8F%E6%9C%80%E5%90%8E%E7%9A%84">http://localhost/api2/（注意最后的</a> “&#x2F;”）被替换成了 <a href="http://localhost:8080/%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E5%8A%A0%E4%B8%8A%E5%89%A9%E4%B8%8B%E7%9A%84">http://localhost:8080/，然后再加上剩下的</a> “xxx”，于是变成了 <a href="http://localhost:8080/xxx%E3%80%82%E4%BA%86%E8%A7%A3%E8%BF%99%E4%B8%A4%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%89%B9%E7%82%B9%EF%BC%8C%E8%83%BD%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E5%9C%A8%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%AD%E6%9B%B4%E5%8A%A0%E5%87%86%E7%A1%AE%E5%9C%B0%E9%85%8D%E7%BD%AE">http://localhost:8080/xxx。了解这两种类型的特点，能帮助我们在实际应用中更加准确地配置</a> Nginx，确保反向代理的正确运行。</p><h4 id="二、不带-URI-方式详解"><a href="#二、不带-URI-方式详解" class="headerlink" title="二、不带 URI 方式详解"></a><strong>二、不带 URI 方式详解</strong></h4><h5 id="（一）举例与原理"><a href="#（一）举例与原理" class="headerlink" title="（一）举例与原理"></a><strong>（一）举例与原理</strong></h5><p>为了更好地理解不带 URI 方式的工作原理，我们来看更多的例子。假如客户端请求为：<a href="http://localhost/test3/xxx%EF%BC%8C%E9%85%8D%E7%BD%AE%E4%B8%BA">http://localhost/test3/xxx，配置为</a></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /test3/ &#123;</span><br><span class="line">  proxy_pass http://localhost:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>按照不带 URI 方式的规则，首先保留 location 后的所有内容，即 <a href="http://localhost/test3/xxx%E3%80%82%E7%84%B6%E5%90%8E%E6%8B%BC%E6%8E%A5%E4%BB%A3%E7%90%86%E8%B7%AF%E5%BE%84%E5%90%8E%E9%9D%A2%EF%BC%8C%E6%9C%80%E7%BB%88%E8%AF%B7%E6%B1%82%E4%B8%BA">http://localhost/test3/xxx。然后拼接代理路径后面，最终请求为</a> <a href="http://localhost:8080/test3/xxx%E3%80%82">http://localhost:8080/test3/xxx。</a></p><p>再看一个例子，客户端请求为：<a href="http://localhost/test4/xxx%EF%BC%8C%E9%85%8D%E7%BD%AE%E4%B8%BA">http://localhost/test4/xxx，配置为</a></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /test4/ &#123;</span><br><span class="line">  proxy_pass http://localhost:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>同样，先保留 location 后的所有内容，得到 <a href="http://localhost/test4/xxx%E3%80%82%E6%8E%A5%E7%9D%80%E6%8B%BC%E6%8E%A5%E4%BB%A3%E7%90%86%E8%B7%AF%E5%BE%84%EF%BC%8C%E6%9C%80%E7%BB%88%E8%AF%B7%E6%B1%82%E5%8F%98%E4%B8%BA">http://localhost/test4/xxx。接着拼接代理路径，最终请求变为</a> <a href="http://localhost:8080/test4/xxx%E3%80%82">http://localhost:8080/test4/xxx。</a></p><p>通过这些例子可以看出，在不带 URI 方式下，无论 location 中的路径具体形式如何，Nginx 都会严格按照 “保留 location 后的内容，拼接代理路径后” 的规则进行处理。</p><h5 id="（二）总结特点"><a href="#（二）总结特点" class="headerlink" title="（二）总结特点"></a><strong>（二）总结特点</strong></h5><p>不带 URI 方式确实较为简单直接。在实际应用中，我们无需过多考虑复杂的路径替换规则，只要记住无论 location 中带不带右斜杠，都将其后面的内容直接拼接到代理路径后即可。这种方式在一些场景下可以快速实现反向代理的配置，提高配置效率。同时，由于其规则简单，也减少了出现配置错误的可能性。例如，在一些小型项目或者对反向代理要求不高的场景中，不带 URI 方式可以满足基本的代理需求，并且易于理解和维护。总之，不带 URI 方式以其简洁性和稳定性在 Nginx 的反向代理配置中有着特定的应用场景和价值。</p><h4 id="三、带-URI-方式剖析"><a href="#三、带-URI-方式剖析" class="headerlink" title="三、带 URI 方式剖析"></a><strong>三、带 URI 方式剖析</strong></h4><h5 id="（一）举例与规则"><a href="#（一）举例与规则" class="headerlink" title="（一）举例与规则"></a><strong>（一）举例与规则</strong></h5><p>假如客户端请求为：<a href="http://localhost/test7/xxx%EF%BC%8C%E9%85%8D%E7%BD%AE%E4%B8%BA">http://localhost/test7/xxx，配置为</a></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /test7/ &#123;</span><br><span class="line">  proxy_pass http://localhost:8080/aaa/bbb/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>按照带 URI 方式的规则，<strong>首先在客户端请求去除 location，获得剩下的右侧内容，即 xxx（获得的右侧内容）。然后拼接到代理路径中</strong>，最终请求为 <a href="http://localhost:8080/aaa/bbb/xxx%E3%80%82">http://localhost:8080/aaa/bbb/xxx。</a></p><p>再如，客户端请求为：<a href="http://localhost/test8/xxx%EF%BC%8C%E9%85%8D%E7%BD%AE%E4%B8%BA">http://localhost/test8/xxx，配置为</a></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /test8 &#123;</span><br><span class="line">  proxy_pass http://localhost:8080/ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>同样<strong>先去除 location，获得右侧内容 &#x2F;xxx（获得的右侧内容）。接着拼接到代理路径中</strong>，最终请求为 <a href="http://localhost:8080/ccc/xxx%E3%80%82">http://localhost:8080/ccc/xxx。</a></p><p>通过这些例子可以清晰地看到，在<strong>带 URI 方式下，无论代理路径的具体形式如何，总是先去除 location，然后将剩余的右侧内容拼接到代理路径中</strong>。这种方式相对不带 URI 方式更加复杂，需要仔细考虑代理路径的具体配置，以确保最终的请求路径正确。</p><h5 id="（二）总结建议"><a href="#（二）总结建议" class="headerlink" title="（二）总结建议"></a><strong>（二）总结建议</strong></h5><p>如前文所述，当 location 和 proxy_pass 中有一个不带斜杠时，最终的请求路径就可能出现不同寻常的情况。例如，客户端请求为 <a href="http://localhost/test9/xxx">http://localhost/test9/xxx</a> 时</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /test9 &#123;</span><br><span class="line">  proxy_pass http://localhost:8080/ddd/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>最终请求为 <a href="http://localhost:8080/ddd//xxx">http://localhost:8080/ddd//xxx</a>  这里会出现路径拼接错误的情况。</p><blockquote><p>因此，为了避免出现这种错误，建议在配置 Nginx 反向代理时，要不 location 和 proxy_pass 都带斜杠，要不都不带。这样可以确保路径拼接的正确性，减少配置错误的可能性。在实际应用中，我们应该根据具体的需求和场景，谨慎选择带 URI 方式或不带 URI 方式，并严格遵循这个建议，以确保 Nginx 反向代理的稳定运行。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
